--studentHome
--테이블 생성
DROP TABLE STU01;
DROP SEQUENCE STU_SEQ;

CREATE TABLE STU01(
    NO NUMBER(4), --PK
    NAME VARCHAR2(20),
    KOR NUMBER(4),
    ENG NUMBER(4),
    MATH NUMBER(4),
    SUM NUMBER(4) DEFAULT 0,
    AVG NUMBER(4,1) DEFAULT 0
--    GRADE VARCHAR2(4)
--    RANK NUMBER(4)
);
ALTER TABLE STU01 ADD CONSTRAINT STU_NO_PK PRIMARY KEY(NO);
ALTER TABLE STU01 ADD GRADE VARCHAR2(4);
ALTER TABLE STU01 ADD RANK NUMBER(4);

ALTER TABLE STU01 MODIFY NAME CHAR(20);

CREATE TABLE STU01_TRASH(
    NO NUMBER(4), --PK
    NAME VARCHAR2(20) NOT NULL,
    KOR NUMBER(4) NOT NULL,
    ENG NUMBER(4) NOT NULL,
    MATH NUMBER(4) NOT NULL,
    SUM NUMBER(4) DEFAULT 0,
    AVG NUMBER(4,1) DEFAULT 0
);

ALTER TABLE STU01_TRASH ADD CONSTRAINT STU_TRASH_NO_PK PRIMARY KEY(NO);

DROP TABLE STU01_TRASH;


COMMIT;
DESC STU01;
--시퀀스 생성
CREATE SEQUENCE STU_SEQ
START WITH 1
INCREMENT BY 1;

--합, 평균 구하는 트리거 생성
CREATE OR REPLACE TRIGGER STU_TRIGGER
BEFORE INSERT ON STU01
FOR EACH ROW
BEGIN
    :NEW.SUM := :NEW.KOR + :NEW.ENG + :NEW.MATH;
    :NEW.AVG := ROUND((:NEW.KOR + :NEW.ENG + :NEW.MATH) / 3, 1);
END;
/
--update 시 합, 평균이 같이 변하는 트리거 생성
CREATE OR REPLACE TRIGGER STU_TRIGGER2
BEFORE UPDATE ON STU01
FOR EACH ROW
BEGIN
    :NEW.SUM := :NEW.KOR + :NEW.ENG + :NEW.MATH;
    :NEW.AVG := ROUND((:NEW.KOR + :NEW.ENG + :NEW.MATH) / 3, 1);
END;
/
--업데이트시 등급이 같이 변하는 트리거 설정.
CREATE OR REPLACE TRIGGER STU_TRIGGER3
BEFORE UPDATE ON STU01
FOR EACH ROW
DECLARE
    SGRADE STU01.GRADE%TYPE;
BEGIN
    IF(:OLD.AVG >= 90) THEN
        SGRADE := 'A';
    ELSIF(:OLD.AVG >= 80) THEN
        SGRADE := 'B';
    ELSIF(:OLD.AVG >= 70) THEN
        SGRADE := 'C';
    ELSIF(:OLD.AVG >= 60) THEN
        SGRADE := 'D';
    ELSIF(:OLD.AVG < 60)  THEN
        SGRADE := 'F';
    END IF;
     :NEW.GRADE := SGRADE;
END;
/
COMMIT;

--등급 자동 생성 프로시저
CREATE OR REPLACE PROCEDURE STU01_PROC(
    SNO IN STU01.NO%TYPE,
    SMESSAGE OUT VARCHAR2
    )
IS
    STU01_ROW STU01%ROWTYPE;
    SGRADE STU01.GRADE%TYPE;
BEGIN
    SELECT * INTO STU01_ROW FROM STU01 WHERE NO = SNO;

    IF(STU01_ROW.AVG >= 90) THEN
        SGRADE := 'A';
    ELSIF(STU01_ROW.AVG >= 80) THEN
        SGRADE := 'B';
    ELSIF(STU01_ROW.AVG >= 70) THEN
        SGRADE := 'C';
    ELSIF(STU01_ROW.AVG >= 60) THEN
        SGRADE := 'D';
    ELSIF(STU01_ROW.AVG < 60)  THEN
        SGRADE := 'F';
    END IF;
    
    UPDATE STU01 SET GRADE = SGRADE WHERE NO = SNO;

    SMESSAGE := SNO || '번 ' || STU01_ROW.NAME || '학생의 평균은 ' || STU01_ROW.AVG || '점 으로 ' || SGRADE || '학점 입니다.';
END;
/
--CREATE OR REPLACE TRIGGER STU01_TRASH_TRIGGER
--BEFORE DELETE ON STU01
--FOR EACH ROW
--BEGIN
--    INSERT INTO STU01_TRASH VALUES(:OLD.NO, :OLD.NAME, :OLD.KOR, :OLD.ENG, :OLD.MATH, :OLD.SUM, :OLD.AVG, :OLD.GRADE, :OLD.RANK);
--END;
--/

DROP TRIGGER STU01_TRASH_TIRGGER;

--삭제된 칼럼을 휴지통테이블에 저장하는 프로시저
CREATE OR REPLACE PROCEDURE STU01_PROC3(
    SNO STU01.NO%TYPE
)
IS
    STU01_ROW STU01%ROWTYPE;
BEGIN
    SELECT * INTO STU01_ROW FROM STU01 WHERE NO = SNO;
    INSERT INTO STU01_TRASH VALUES(STU01_ROW.NO, STU01_ROW.NAME, STU01_ROW.KOR, 
                                   STU01_ROW.ENG, STU01_ROW.MATH, STU01_ROW.SUM,
                                   STU01_ROW.AVG);
END;
/
EXECUTE STU01_PROC3(3);

SELECT * FROM STU01;
SELECT * FROM STU01_TRASH;


commit;


--학생 테이블 펑션
CREATE OR REPLACE FUNCTION STU01_FUNC(
    SNO STU01.NO%TYPE)
    RETURN VARCHAR2
IS
    STU01_ROW STU01%ROWTYPE;
    SMESSAGE VARCHAR2(200);
BEGIN
    SELECT * INTO STU01_ROW FROM STU01 WHERE NO = SNO;
    SMESSAGE := SNO||'번 '||STU01_ROW.NAME||'학생의 점수는'||CHR(13)||CHR(10)||CHR(13)||CHR(10)||'국어 : '||STU01_ROW.KOR||
    '점'||CHR(13)||CHR(10)||'영어 : '||STU01_ROW.ENG||'점'||CHR(13)||CHR(10)||'수학 : '||STU01_ROW.MATH||'점'||CHR(13)||CHR(10)||
    '평점 : '||STU01_ROW.AVG||'점'||CHR(13)||CHR(10)||CHR(13)||CHR(10)||STU01_ROW.GRADE||'등급 입니다.';
    RETURN SMESSAGE;
END;
/

--랭크 자동 생성 프로시저
CREATE OR REPLACE PROCEDURE STU01_PROC2
IS
    STU01_ROW STU01%ROWTYPE;
    CURSOR C1 IS 
    SELECT NO, NAME, AVG,  DENSE_RANK() OVER(ORDER BY AVG DESC) RANK FROM STU01 ORDER BY AVG DESC;
BEGIN
    FOR STU01_ROW IN C1 LOOP
        UPDATE STU01 SET RANK = STU01_ROW.RANK WHERE NO =  STU01_ROW.NO; 
    END LOOP;
END;
/
select * from stu01_trash;

DELETE FROM STU01_TRASH;
rollback;