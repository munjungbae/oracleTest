--studentHome
--테이블 생성
CREATE TABLE STU01(
    NO NUMBER(4), --PK
    NAME VARCHAR2(20),
    KOR NUMBER(4),
    ENG NUMBER(4),
    MATH NUMBER(4),
    SUM NUMBER(4) DEFAULT 0,
    AVG NUMBER(4,1) DEFAULT 0
--    GRADE VARCHAR2(4)
);
ALTER TABLE STU01 ADD CONSTRAINT STU_NO_PK PRIMARY KEY(NO);
ALTER TABLE STU01 DROP COLUMN GRADE;
ALTER TABLE STU01 ADD  GRADE VARCHAR2(4);

COMMIT;
DESC STU01;
--시퀀스 생성
CREATE SEQUENCE STU_SEQ
START WITH 1
INCREMENT BY 1;

--합, 평균 구하는 트리거 생성
CREATE OR REPLACE TRIGGER STU_TRIGGER
BEFORE INSERT ON STU01
FOR EACH ROW
BEGIN
    :NEW.SUM := :NEW.KOR + :NEW.ENG + :NEW.MATH;
    :NEW.AVG := ROUND((:NEW.KOR + :NEW.ENG + :NEW.MATH) / 3, 1);
END;
/
--update 시 합, 평균이 같이 변하는 트리거 생성
CREATE OR REPLACE TRIGGER STU_TRIGGER2
BEFORE UPDATE ON STU01
FOR EACH ROW
BEGIN
    :NEW.SUM := :NEW.KOR + :NEW.ENG + :NEW.MATH;
    :NEW.AVG := ROUND((:NEW.KOR + :NEW.ENG + :NEW.MATH) / 3, 1);
END;



--등급 자동 생성 프로시저
CREATE OR REPLACE PROCEDURE STU01_PROC(
    SNO IN STU01.NO%TYPE,
    SMESSAGE OUT VARCHAR2
    )
IS
    STU01_ROW STU01%ROWTYPE;
    SGRADE STU01.GRADE%TYPE;
BEGIN
    SELECT * INTO STU01_ROW FROM STU01 WHERE NO = SNO;

    IF(STU01_ROW.AVG >= 90) THEN
        SGRADE := 'A';
    ELSIF(STU01_ROW.AVG >= 80) THEN
        SGRADE := 'B';
    ELSIF(STU01_ROW.AVG >= 70) THEN
        SGRADE := 'C';
    ELSIF(STU01_ROW.AVG >= 60) THEN
        SGRADE := 'D';
    ELSIF(STU01_ROW.AVG < 60)  THEN
        SGRADE := 'F';
    END IF;
    
    UPDATE STU01 SET GRADE = SGRADE WHERE NO = SNO;

    SMESSAGE := SNO || '번 ' || STU01_ROW.NAME || '학생의 평균은 ' || STU01_ROW.AVG || '점 으로 ' || SGRADE || '학점 입니다.';
END;
/

--학생 테이블 펑션
CREATE OR REPLACE FUNCTION STU01_FUNC(
    SNO STU01.NO%TYPE)
    RETURN VARCHAR2
IS
    STU01_ROW STU01%ROWTYPE;
    SMESSAGE VARCHAR2(200);
BEGIN
    SELECT * INTO STU01_ROW FROM STU01 WHERE NO = SNO;
    SMESSAGE := SNO||'번 '||STU01_ROW.NAME||'학생의 점수는'||CHR(13)||CHR(10)||'국어 : '||STU01_ROW.KOR||
    '점'||CHR(13)||CHR(10)||'영어 : '||STU01_ROW.ENG||'점'||CHR(13)||CHR(10)||'수학 : '||STU01_ROW.MATH||'점'||CHR(13)||CHR(10)||
    '평점 : '||STU01_ROW.AVG||CHR(13)||CHR(10)||STU01_ROW.GRADE||'등급 입니다.';
    RETURN SMESSAGE;
END;
/

SELECT STU01_FUNC(4) AS "RESULT" FROM DUAL;

SELECT AVG FROM STU01 WHERE NO = 4;
    
SELECT NAME FROM STU01 WHERE NO = 4;


DROP TABLE STU01;
DROP SEQUENCE STU_SEQ;

INSERT INTO STU01(NO, NAME, KOR, ENG, MATH) VALUES(STU_SEQ.NEXTVAL, 'MUNJUNGBAE', 80, 85, 90);
INSERT INTO STU01(NO, NAME, KOR, ENG, MATH) VALUES(STU_SEQ.NEXTVAL, 'MUNJUNGBAE', 77, 23, 67);
COMMIT;
SELECT * FROM STU01;

SELECT NO, NAME, AVG, RANK() OVER(ORDER BY AVG DESC) AS RANK FROM STU01;

DELETE FROM STU01 WHERE NO = 1;

UPDATE STU01 SET KOR = 80, ENG = 90, MATH = 75 WHERE NO = 1;




--등급 자동 생성 프로시저
CREATE OR REPLACE PROCEDURE STU01_PROC2
IS
    STU01_ROW STU01%ROWTYPE;
    CURSOR C1 IS 
    SELECT NO, NAME, AVG, RANK() OVER(ORDER BY AVG DESC) RANK FROM STU01 ORDER BY AVG DESC;
BEGIN
    FOR STU01_ROW IN C1 LOOP
    UPDATE STU01 SET RANK = STU01_ROW.RANK WHERE NO =  STU01_ROW.NO; 
    COMMIT;
    END LOOP;
END;
/
select * from stu01;

execute STU01_PROC2;